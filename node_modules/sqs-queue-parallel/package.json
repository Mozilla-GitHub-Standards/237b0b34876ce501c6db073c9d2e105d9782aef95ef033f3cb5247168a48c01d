{
  "name": "sqs-queue-parallel",
  "description": "Create a poll of Amazon SQS queue watchers and each one can receive 1+ messages",
  "main": "dist/sqs-queue-parallel",
  "homepage": "https://github.com/bigluck/sqs-queue-parallel",
  "author": {
    "name": "Luca Bigon"
  },
  "version": "0.1.3",
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bigluck/sqs-queue-parallel/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "sqs",
    "queue",
    "poll",
    "amazon",
    "aws"
  ],
  "maintainers": [
    {
      "name": "Luca Bigon"
    }
  ],
  "scripts": {
    "build": "grunt dist"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bigluck/sqs-queue-parallel.git"
  },
  "bugs": {
    "url": "https://github.com/bigluck/sqs-queue-parallel/issues"
  },
  "dependencies": {
    "aws-sdk": "^2.0.0-rc11",
    "async": "^0.2.10",
    "lodash": "^2.4.1"
  },
  "devDependencies": {
    "grunt": "^0.4.4",
    "coffee-script": "^1.7.1",
    "nodemon": "^1.0.15",
    "grunt-contrib-coffee": "^0.10.1",
    "grunt-banner": "^0.2.2"
  },
  "readme": "# sqs-queue-parallel.js\n\nsqs-queue-parallel is a **node.js** library build on top of **Amazon AWS SQS** with **concurrency and parallel** message poll support.\n\nYou can create a poll of SQS queue watchers, each one can receive 1 or more messages from Amazon SQS.\n\nWith sqs-queue-parallel you need just to configure your AWS private keys, setup your one o more `message` event callbacks and wait for new messages to be processed.\n\n\n\n# Example\n\n```javascript\nvar SqsQueueParallel = require('sqs-queue-parallel');\n\n// Simple configuration:\n//  - 2 concurrency listeners\n//  - each listener can receive up to 4 messages\n// With this configuration you could receive and parse 8 `message` events in parallel\nvar queue = new SqsQueueParallel({\n\tname: \"sqs-test\",\n\tmaxNumberOfMessages: 4,\n\tconcurrency: 2\n});\nqueue.on('message', function (e, next)\n{\n\tconsole.log('New message: ', e.metadata, e.data.MessageId)\n\te.delete()\n\te.next()\n});\nqueue.on('error', function (err)\n{\n\tconsole.log('There was an error: ', err);\n});\n```\n\n\n# Download\n\nYou can download and install this library using Node Package Manager (npm):\n\n```bash\nnpm install sqs-queue-parallel --save\n```\n\n\n# Summary\n\n* [Constructor](#constructor):\n\t* new SqsQueueParallel(options = {})\n* [Methods](#methods):\n\t* push(message = {}, callback)\n\t* delete(receiptHandle, callback)\n* [Properties](#properties):\n\t* client\n\t* url\n* [Events](#events):\n\t* connection\n\t* connect\n\t* message\n\t* error\n\n* Global env:\n\t* AWS_REGION\n\t* AWS_ACCESS_KEY\n\t* AWS_SECREY_KEY\n\n\n\n# Constructor\n\n\n## new SqsQueueParallel(options = {})\n\nFirst you need to initialize a new object instance with a configuration.\n\n**Examples:**\n\nConstructing an object\n```javascript\nvar queue = new SqsQueueParallel({ name: 'sqs-test' });\n```\n\n**Options Hash (options):**\n\n* **name** (String) — **_Required_**: name of the remote queue to be watched\n* **region** (String) — the region to send/read service requests. Default is `process.env.AWS_REGION`\n* **accessKeyId** (String) — your AWS access key ID. Default is `process.env.AWS_ACCESS_KEY`\n* **secretAccessKey** (String) — your AWS secret access key. Default is `process.env.AWS_SECRET_KEY`\n* **visibilityTimeout** (Integer) — duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request. Default is 30\n* **waitTimeSeconds** (Integer) — duration (in seconds) for which the call will wait for a message to arrive in the queue before returning. If a message is available, the call will return sooner than WaitTimeSeconds. Default is 20\n* **maxNumberOfMessages** (Integer) — maximum number of messages to return. Amazon SQS never returns more messages than this value but may return fewer. Default is 1\n* **concurrency** (Integer) — number of concurrency fetcher to start. Default is 1\n* **debug** (Boolean) — enable debug mode. Default is true\n\n\n**Important**:\n\nEach `concurrency` queue can read `maxNumberOfMessages` messages from Amazon SQS.\n\nFor example, **2** `concurrency` queue with **5** `maxNumberOfMessages` can trigger a max of **5 * 2 = 10** `message` events; so it's very important to be carefull, expecially if you're working with I/O streams.\n\n\n\n# Properties\n\n\n## queue.client\n\nReturns the SQS client object used by the queue.\n\n\n## queue.url\n\nUrl of the connected queue.\n\n\n\n# Methods\n\n\n## queue.push(params = {}, callback)\n\nBuild on the top of `SQS.sendMessage()` allow you to easly push a message to the connected queue.\n\n**Parameters:**\n\n* **params** (Object)\n\t* body (Any type) — default to {}\n\t\n\t\tAn arbitrary message, could be a string, a number or a object.\n\t* delay (Integer)\n\t\n\t\tThe number of seconds (0 to 900 - 15 minutes) to delay a specific message. Messages with a positive DelaySeconds value become available for processing after the delay time is finished. If you don't specify a value, the default value for the queue applies\n\n**Callback (callback):**\n\n```javascript\nfunction(err, data) {}\n```\n\nFor more information take checkout the [official AWS documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SQS.html#sendMessage-property).\n\n**Esample:**\n\n```javascript\nvar SqsQueueParallel = require('src/sqs-queue-parallel');\n\nvar queue = new SqsQueueParallel({ name: \"sqs-test\" });\nqueue.push({\n\tbody: 'my message',\n\tdelay: 10\t\n});\nqueue.push({\n\tbody: [1, 2, 3]\n}, function (err, data)\n{\n\tif (err)\n\t\tconsole.log('There was a problem: ', err);\n\telse\n\t\tconsole.log('Item pushed', data);\n});\n```\n\n\n## queue.delete(receiptHandle, callback)\n\nBuild on the top of `SQS.deleteMessage()` allow you to easly delete a message from the connected queue.\n\n**Parameters:**\n\n* **receipHandler** (String)\n\n\tThe receipt handle associated with the message to delete.\n\n**Callback (callback):**\n\n```javascript\nfunction(err, data) {}\n```\n\nFor more information take checkout the official [AWS documentation](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SQS.html#deleteMessage-property).\n\n**Esample:**\n\n```javascript\nvar SqsQueueParallel = require('src/sqs-queue-parallel');\n\nvar queue = new SqsQueueParallel({ name: \"sqs-test\" });\nqueue.delete('receipt-handle-to-delete-1');\nqueue.delete('receipt-handle-to-delete-2'); function (err, data)\n{\n\tif (err)\n\t\tconsole.log('There was a problem: ', err);\n\telse\n\t\tconsole.log('Item deleted', data);\n});\n```\n\n\n\n# Events\n\n\n## connection\n\n```javascript\nfunction(urls) { }\n```\n\nTriggered when a connection is established with the remote server.\n\n* **urls** (Array): list of all remotes urls\n\n\n## connect\n\n```javascript\nfunction(url) { }\n```\n\nTriggered when the required queue `name` is found in the remote list of queues.\n\n* **url** (Object): url of the connected queue\n\n\n## message\n\n```javascript\nfunction(message) { }\n```\n\nEvent triggered each time a new message has been received from the remote queue.\n\n* **message** (Object)\n\t* type (String): default is \"Message\"\n\t* data (Unknown): JSON.parsed message.Body or a string (if could not be parsed)\n\t* message (Object): reference to the received message\n\t* metadata (Object): reference to the metadata of the received message\n\t* url (String): url of the connected queue\n\t* delete(callback) (Function):\n\t\n\t\tHelper to delete (or `SQS.deleteMessage()`) this message; `callback` is the same of the public `delete()` method\n\t* push(params = {}, callback) (Function): push a new message in the queue\n\t* **next()** (Function): call this method when you've completed your jobs in the event callback.\n\n\n## error\n\n```javascript\nfunction(error) { }\n```\n\n\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2014 Luca Bigon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "sqs-queue-parallel@0.1.3",
  "dist": {
    "shasum": "ad38cfbfcb0c582e896a9bbed30bf5915a1e14d0"
  },
  "_from": "sqs-queue-parallel@",
  "_resolved": "https://registry.npmjs.org/sqs-queue-parallel/-/sqs-queue-parallel-0.1.3.tgz"
}
